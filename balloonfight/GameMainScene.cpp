#include"DxLib.h"
#include"TitleScene.h"
#include"GameMainScene.h"
#include"AbstractScene.h"

#include<math.h>
#include<stdlib.h>

#define DEBUG

int Stage[5][MAP_HEIGHT][MAP_WIDTH] =
{
	//STAGE 1
	{
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	},
	//STAGE 2
	{
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,0,0,0},
		{0,0,0,0,0,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	},
	//STAGE 3
	{
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	},
	//STAGE 4
	{
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	},
	//STAGE 5
	{
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
		{0,0,0,0,0,3,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
		{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	}
};

GameMainScene::GameMainScene()
{
	Level = 0;
	Score = 0;
	player.SetMapData(Stage[Level]);

	enemy = new Enemy * [ENEMY_MAX];
	bubble = new Bubble * [ENEMY_MAX];

	for (int i = 0; i < ENEMY_MAX; i++)
	{
		enemy[i] = nullptr;
		bubble[i] = nullptr;
	}

	enemy[0] = new Enemy(SCREEN_WIDTH / 2 - 10, SCREEN_HEIGHT / 2);
	enemy[0]->SetMapData(Stage[Level]);

	enemy[1] = new Enemy(SCREEN_WIDTH / 2 - 110, SCREEN_HEIGHT / 2);
	enemy[1]->SetMapData(Stage[Level]);

	enemy[2] = new Enemy(SCREEN_WIDTH / 2 + 90, SCREEN_HEIGHT / 2);
	enemy[2]->SetMapData(Stage[Level]);

	//画像読み込み-----------------------------------------

	//地面
	Ground[0] = LoadGraph("images/GroundA.png");
	Ground[1] = LoadGraph("images/GroundB.png");

	//足場・ステージ１
	Ground[2] = LoadGraph("images/Lv1_foot.png");

	//足場・ステージ２
	Ground[3] = LoadGraph("images/Lv2_foot.png");

	//足場・ステージ３
	Ground[4] = LoadGraph("images/Lv3_footA.png");
	Ground[5] = LoadGraph("images/Lv3_footB.png");
	Ground[6] = LoadGraph("images/Lv3_footC.png");

	//足場・ステージ４
	Ground[7] = LoadGraph("images/Lv4_foot.png");

	//足場・ステージ５
	Ground[8] = LoadGraph("images/Lv5_footA.png");
	Ground[9] = LoadGraph("images/Lv5_footB.png");

	//海
	Ground[10] = LoadGraph("images/Sea.png");

	//魚
	LoadDivGraph("images/Fish.png", 10, 5, 2, 64, 64, FishImg);

	//----------------------------------------------------------
}

AbstractScene* GameMainScene::Update() 
{

	if (player.GetY() < SCREEN_HEIGHT)
	{
		//プレイヤー更新
		player.Update();
	}
	else
	{
		if (120 < ++Miss) 
		{
			Miss = 0;
			player.Reset();
		}
	}

	//敵更新
	for (int i = 0; i < ENEMY_MAX; i++)
	{
		if (enemy[i] != nullptr) 
		{
			//敵情報の更新
			enemy[i]->Update(player.GetX(), player.GetY());

			//敵とプレイヤーの当たり
			if (enemy[i]->GetCondition() != 0 && enemy[i]->GetCondition() != 3)
			{
				player.HitEnemy(enemy[i]->GetX(), enemy[i]->GetY(), enemy[i]->GetWidth(), enemy[i]->GetHeight());
			}
			enemy[i]->HitPlayer(player.GetX(), player.GetY(), player.GetWidth(), player.GetHeight());

			//敵同士の当たり
			for (int j = 0; j < ENEMY_MAX; j++)
			{
				if (enemy[j] != nullptr && i != j) 
				{
					enemy[i]->HitEnemy(enemy[j]->GetX(), enemy[j]->GetY(), enemy[j]->GetWidth(), enemy[j]->GetHeight());
				}
			}

			//スコアを加算する
			Score += enemy[i]->AddScore();

			//海に落ちたらその敵が消えて泡を出す
			if (SCREEN_HEIGHT < enemy[i]->GetY())
			{
				for (int s = 0; s < ENEMY_MAX; s++)
				{
					if (bubble[s] == nullptr && enemy[i]->GetCondition() != 4)
					{
						bubble[s] = new Bubble(enemy[i]->GetX(), SCREEN_HEIGHT);
						break;
					}
				}
				enemy[i] = nullptr;
			}
		}
	}

	//泡更新
	for (int i = 0; i < ENEMY_MAX; i++)
	{
		if (bubble[i] != nullptr)
		{
			//敵情報の更新
			bubble[i]->Update(player.GetX(), player.GetY());

			bubble[i]->HitPlayer(player.GetX(), player.GetY(), player.GetWidth(), player.GetHeight());

			//スコアを加算する
			Score += bubble[i]->AddScore();

			if (bubble[i]->Burst())bubble[i] = nullptr;
		}
	}

#ifdef DEBUG


	if (PAD_INPUT::OnButton(XINPUT_BUTTON_START))
	{
		if (++Level > 4)Level = 0;
		player.SetMapData(Stage[Level]);
		player.Reset();

		for (int i = 0; i < ENEMY_MAX; i++)
		{
			enemy[i] = nullptr;
		}
		enemy[0] = new Enemy(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);
		enemy[0]->SetMapData(Stage[Level]);

		enemy[1] = new Enemy(SCREEN_WIDTH / 2 - 100, SCREEN_HEIGHT / 2);
		enemy[1]->SetMapData(Stage[Level]);

		enemy[2] = new Enemy(SCREEN_WIDTH / 2 + 100, SCREEN_HEIGHT / 2);
		enemy[2]->SetMapData(Stage[Level]);
	}

#endif // DEBUG

	//魚更新
	Fish();

	return this;
}

void GameMainScene::Fish()
{

	bool Approach = false;	//プレイヤーか敵が海面に接近しているならtrueになる


	//魚が出現していない場合
	if (!Encount) 
	{
		//プレイヤーが海面に近づいているか判定
		if (SCREEN_HEIGHT - BLOCK_SIZE * 5 < player.GetY())
		{
			Approach = true;
			//魚が現れる座標をセット
			FishX = player.GetX();

			//ターゲットを設定
			Target = ENEMY_MAX;
		}

		//敵が海面に近づいているか判定
		for (int i = 0; i < ENEMY_MAX; i++)
		{
			if (enemy[i] != nullptr)
			{
				if (SCREEN_HEIGHT - BLOCK_SIZE * 5 < enemy[i]->GetY())
				{
					Approach = true;
					//魚が現れる座標をセット
					FishX = enemy[i]->GetX();

					//ターゲットを設定
					Target = i;
					break;
				}
			}
		}

		//海面に誰かが接近しているならカウントを進める
		if (Approach)
		{
			FishTime++;

			//誰かが接近して3秒経過すると2秒ごとに魚が出現する判定
			if (180 < FishTime && FishTime % 120 == 0)
			{
				//確率で魚が出現してカウントをリセット
				int Check = GetRand(99);
				if (Check < 99)
				{
					Encount = true;
					Attack = true;
					FishTime = 0;
				}
			}
		}
	}
	//魚が出現している場合
	else 
	{
		//カウントを進める
		if (Attack || FishEat)FishTime++;
		else FishTime--;

		//ターゲットが海面に近いか判定
		//ターゲットがプレイヤー
		if (Target == ENEMY_MAX)
		{
			//プレイヤーが海面に近づいているか判定
			if (SCREEN_HEIGHT - BLOCK_SIZE * 5 < player.GetY())
			{
				Approach = true;
				//魚の現れる座標をセット
				FishX = player.GetX();
			}
			else 
			{
				Attack = false;
			}
		}
		//ターゲットが敵
		else if (0 <= Target && Target < ENEMY_MAX)
		{
			if (enemy[Target] != nullptr)
			{
				//該当の敵が海面に近づいているか判定
				if (SCREEN_HEIGHT - BLOCK_SIZE * 5 < enemy[Target]->GetY())
				{
					Approach = true;
					//魚の現れる座標をセット
					FishX = enemy[Target]->GetX();
				}
			}
			else
			{
				Attack = false;
			}
		}

		//魚がキャラを食べる判定
		if (FishTime == 30 && Attack) 
		{
			if (Target == ENEMY_MAX)
			{
				//プレイヤーが海面に近づいているか判定
				if (Approach)
				{
					player.Eaten();
					FishEat = 1;
				}
			}
			else if (0 <= Target && Target < ENEMY_MAX) 
			{
				if (enemy[Target] != nullptr)
				{
					if (Approach)
					{
						enemy[Target]->Eaten();
						FishEat = 2;
					}
				}
			}
		}
		
		//カウントが一定以上になったら出現(Encount)をfalseにする
		if (60 < FishTime || FishTime < 0)
		{
			FishTime = 0;
			FishEat = 0;
			Encount = false;
			Attack = false;
		}
	}
}

void GameMainScene::Draw() const
{
#ifdef DEBUG
	DrawFormatString(100, 50, 0xffffff, "STAGE %d", Level + 1);
	DrawFormatString(200, 50, 0xffffff, "SCORE %d", Score);
	DrawFormatString(300, 50, 0xffffff, "FISH %d", FishTime);
	DrawFormatString(100, 100, 0xffffff, "PRESS START");
#endif // DEBUG

	//for (int i = 0; i <= MAP_WIDTH; i++)
	//{
	//	DrawLine(SIDE_MARGIN + BLOCK_SIZE * i, 0, SIDE_MARGIN + BLOCK_SIZE * i, SCREEN_HEIGHT, 0xffffff);
	//}

	//for (int i = 0; i <= MAP_HEIGHT; i++)
	//{
	//	DrawLine(0, BLOCK_SIZE * i, SCREEN_WIDTH, BLOCK_SIZE * i, 0xffffff);
	//}

	//足場・ステージ１
	if (Level == 0) 
	{
		for (int i = 0; i < MAP_HEIGHT - 6; i++)
		{
			for (int j = 0; j < MAP_WIDTH; j++)
			{
				if (Stage[Level][i][j] == 2)
				{
					DrawGraph(SIDE_MARGIN + BLOCK_SIZE * j, BLOCK_SIZE * i, Ground[2], true);
				}
			}
		}
	}
	//足場・ステージ２
	if (Level == 1)
	{
		for (int i = 0; i < MAP_HEIGHT - 6; i++)
		{
			for (int j = 0; j < MAP_WIDTH; j++)
			{
				if (Stage[Level][i][j] == 2)
				{
					DrawGraph(SIDE_MARGIN + BLOCK_SIZE * j, BLOCK_SIZE * i, Ground[2], true);
				}
				else if (Stage[Level][i][j] == 3)
				{
					DrawGraph(SIDE_MARGIN + BLOCK_SIZE * j, BLOCK_SIZE * i, Ground[3], true);
				}
			}
		}
	}
	//足場・ステージ３
	if (Level == 2)
	{
		for (int i = 0; i < MAP_HEIGHT - 6; i++)
		{
			for (int j = 0; j < MAP_WIDTH; j++)
			{
				if (Stage[Level][i][j] == 2)
				{
					DrawGraph(SIDE_MARGIN + BLOCK_SIZE * j, BLOCK_SIZE * i, Ground[4], true);
				}
				else if (Stage[Level][i][j] == 3)
				{
					DrawGraph(SIDE_MARGIN + BLOCK_SIZE * j, BLOCK_SIZE * i, Ground[5], true);
				}
				else if (Stage[Level][i][j] == 4)
				{
					DrawGraph(SIDE_MARGIN + BLOCK_SIZE * j, BLOCK_SIZE * i, Ground[6], true);
				}
			}
		}
	}
	//足場・ステージ４
	if (Level == 3)
	{
		for (int i = 0; i < MAP_HEIGHT - 6; i++)
		{
			for (int j = 0; j < MAP_WIDTH; j++)
			{
				if (Stage[Level][i][j] == 2)
				{
					DrawGraph(SIDE_MARGIN + BLOCK_SIZE * j, BLOCK_SIZE * i, Ground[7], true);
				}
			}
		}
	}
	//足場・ステージ５
	if (Level == 4)
	{
		for (int i = 0; i < MAP_HEIGHT - 6; i++)
		{
			for (int j = 0; j < MAP_WIDTH; j++)
			{
				if (Stage[Level][i][j] == 2)
				{
					DrawGraph(SIDE_MARGIN + BLOCK_SIZE * j, BLOCK_SIZE * i, Ground[7], true);
				}
				else if (Stage[Level][i][j] == 3)
				{
					DrawGraph(SIDE_MARGIN + BLOCK_SIZE * j, BLOCK_SIZE * i, Ground[8], true);
				}
				else if (Stage[Level][i][j] == 4)
				{
					DrawGraph(SIDE_MARGIN + BLOCK_SIZE * j, BLOCK_SIZE * i, Ground[9], true);
				}
			}
		}
	}

	//地面を描画
	if (Level + 1 <= 3) DrawGraph(SIDE_MARGIN, SCREEN_HEIGHT - 80, Ground[0], true);
	else				DrawGraph(SIDE_MARGIN, SCREEN_HEIGHT - 80, Ground[1], true);

	//プレイヤー更新
	player.Draw();

	//敵更新
	for (int i = 0; i < ENEMY_MAX; i++)
	{
		if (enemy[i] != nullptr)
		{
			enemy[i]->Draw();
		}

		if (bubble[i] != nullptr)
		{
			bubble[i]->Draw();
		}
	}

	//魚
	if (Encount) 
	{
		if (FishTime < 30)
		{
			int FishY = (BLOCK_SIZE * 2.3) / 30 * FishTime;
			if (FishTime < 15)DrawRotaGraph2(SIDE_MARGIN + FishX, SCREEN_HEIGHT - FishY, 32, 64, 1, 0, FishImg[0], true);
			else if (FishTime < 25)DrawRotaGraph2(SIDE_MARGIN + FishX, SCREEN_HEIGHT - FishY, 32, 64, 1, 0, FishImg[1], true);
			else if (FishTime < 30)DrawRotaGraph2(SIDE_MARGIN + FishX, SCREEN_HEIGHT - FishY, 32, 64, 1, 0, FishImg[2], true);
		}
		else if (FishTime < 60)
		{
			int FishY = (BLOCK_SIZE * 2.3) - (BLOCK_SIZE * 1.1) / 30 * (FishTime - 30);
			if (FishTime < 40)DrawRotaGraph2(SIDE_MARGIN + FishX, SCREEN_HEIGHT - FishY, 32, 64, 1, 0, FishImg[5 + FishEat], true);
			else if (FishTime < 47)DrawRotaGraph2(SIDE_MARGIN + FishX, SCREEN_HEIGHT - FishY, 32, 64, 1, 0, FishImg[3], true);
			else if (FishTime < 54)DrawRotaGraph2(SIDE_MARGIN + FishX, SCREEN_HEIGHT - FishY, 32, 64, 1, 0, FishImg[4], true);
			else if (FishTime < 60)DrawRotaGraph2(SIDE_MARGIN + FishX, SCREEN_HEIGHT - FishY, 32, 64, 1, 0, FishImg[5], true);
		}
	}

	//海
	DrawGraph(SIDE_MARGIN, SCREEN_HEIGHT - 80, Ground[10], true);

	//画面端の空間
	DrawBox(0, 0, SIDE_MARGIN, SCREEN_HEIGHT, 0x000000, true);
	DrawBox(SCREEN_WIDTH - SIDE_MARGIN, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0x000000, true);
}